--statements:
--CREATE TABLE creates a new table.
--INSERT INTO adds a new row to a table.
--SELECT queries data from a table.
--ALTER TABLE changes an existing table.
--UPDATE edits a row in a table.
--DELETE FROM deletes rows from a table.
--	Constraints--add information about how a column can be used. 


--Adds a new column to a table:
ALTER TABLE 
--e.g.:
ALTER TABLE celebs 
ADD COLUMN twitter_handle TEXT;
--
ALTER TABLE [the table that is being changed]
ADD COLUMN [new column being added] [new data type for column]


--NULL == represents missing or unknown data


--UPDATE == edits a row in a table/change existing records
--e.g.:
UPDATE celebs 
SET twitter_handle = '@taylorswift13' 
WHERE id = 4; 


---------------
--ALERT vs UPDATE
--The ALTER statement is used to modify columns. With ALTER, you can add columns, remove them, or even modify them.

--The UPDATE statement is used to modify rows. However, UPDATE can only update a row, and cannot remove or add rows.
---------------


--Constraints == add information about how a column can be used(tell the database to reject inserted data that does not adhere to a certain restriction/sets constraints)
--NOTE: are invoked after specifying the data type for a column
--PRIMARY KEY
--uniquely identify the row. Attempts to insert a row with an identical value to a row already in the table will result in a "constraint violation"
--NOTE:only one PRIMARY KEY column per table
--
--UNIQUE
--have a different value for every row. This is similar to PRIMARY KEY except a table can have many different UNIQUE columns
--NOT NULL
--columns must have a value. Attempts to insert a row without a value for a NOT NULL column will result in a constraint violation
--DEFAULT
--take an additional argument that will be the assumed value for an inserted row if the new row does not specify a value for that column
--constraint violation == will not allow you to do action
--e.g.:
CREATE TABLE celebs (
   id INTEGER PRIMARY KEY, 
   name TEXT UNIQUE,
   date_of_birth TEXT NOT NULL,
   date_of_death TEXT DEFAULT 'Not Applicable'
);



------------------------------------------------------------------------
--querying == retrieve information stored in a database
--(allow us to communicate with the database by asking questions and returning a result set with data relevant to the question)

    SELECT is the clause we use every time we want to query information from a database.
    AS renames a column or table.
    DISTINCT return unique values.
    WHERE is a popular command that lets you filter the results of the query based on conditions that you specify.
    LIKE and BETWEEN are special operators.
    AND and OR combines multiple conditions.
    ORDER BY sorts the result.
    LIMIT(always at the end) specifies the maximum number of rows that the query will return.
    CASE creates different outputs.



------------------------------------------------------------------------
--aggregates == calculations performed on multiple rows of a table
--Aggregate functions combine multiple rows together to form a single value of more meaningful information.

    COUNT(): count the number of rows
    SUM(): the sum of the values in a column
    MAX()/MIN(): the largest/smallest value
    AVG(): the average of the values in a column
    ROUND(): round the values in the column

--GROUP BY
--ORDER BY

--HAVING

--WHERE == filter the rows
--HAVING == filter groups
    When we want to limit the results of a query based on values of the individual rows, use WHERE.
    When we want to limit the results of a query based on an aggregate property, use HAVING.
--NOTE: HAVING statement always comes after GROUP BY, but before ORDER BY and LIMIT.


------------------------------------------------------------------------
--"joining" two tables == matching tables, one table info to another table info, following a line



--NOTE:JOIN == often called an "inner join"



--primary keys == special columns that are used to uniquely identify each row of a table in SQL
--Primary keys requirements:
    None of the values can be NULL.
    Each value must be unique (i.e., you canâ€™t have two customers with the same customer_id in the customers table).
    A table can not have more than one primary key column.

--foreign key == the primary key for a different table

--id == Generally, the primary key will just be called "id"
--Foreign keys will have more descriptive names.

--The most common types of joins is: joining a foreign key from one table with the primary key from another table



    JOIN will combine rows from different tables if the join condition is true.
    LEFT JOIN will return every row in the left table, and if the join condition is not met, NULL values are used to fill in the columns from the right table.
    Primary key is a column that serves a unique identifier for the rows in the table.
    Foreign key is a column that contains the primary key to another table.
    CROSS JOIN lets us combine all rows of one table with all rows of another table.
    UNION stacks one dataset on top of another.
    WITH allows us to define one or more temporary tables that can be used in the final query.






